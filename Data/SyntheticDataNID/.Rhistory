for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,0.02, penalize.diagonal=FALSE)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,0.02, penalize.diagonal=FALSE)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,0.02)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,0.01)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,0.005)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,0.01)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,log(p)/n)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
library(pcalg)
data(gmG)
n <- nrow    (gmG8$ x)
V <- colnames(gmG8$ x) # labels aka node names
## estimate CPDAG
pc.fit <- pc(suffStat = list(C = cor(gmG8$x), n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
plot(gmG8$g, main = "True DAG")
}
View(gmG8)
n=500
pc.fit <- pc(suffStat = list(C = cor(data), n = n),indepTest = gaussCItest,alpha=0.01, verbose = TRUE)
pc.fit <- pc(suffStat = list(C = cor(data), n = n),indepTest = gaussCItest,alpha=0.01, p=70, verbose = TRUE)
pc.fit
##############
### 08/24/2023
### Estimation of moral graph for all real-world nets using graphical lasso
##############
library(glasso)
dataset.folder <- "E:\\Northwestern\\Research\\independent study 1\\dag\\gurobi\\MIPDAGextentions\\RealWorldDatasetsHHWu\\NonEqVarData"
dataset.name = "12hepar"
data.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "n_500_iter_1")[1]
true.graph.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Original")
mgest.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "mgest_PearsonCorEst.txt")
true.moral.file = list.files(paste(dataset.folder,dataset.name,sep="\\"), "Sparse_Moral")
data = read.csv(paste(dataset.folder,dataset.name, data.file, sep="\\"), header=FALSE)
true_graph = read.table(paste(dataset.folder,dataset.name,true.graph.file, sep="\\"), header=FALSE, sep=",")
moral_graph = read.table(paste(dataset.folder,dataset.name,mgest.file, sep="\\"), header=FALSE, sep=",")
true_moral = read.table(paste(dataset.folder,dataset.name,true.moral.file, sep="\\"), header=FALSE, sep=",")
S = cov(data)
n = 500
p = dim(data)[2]
m = dim(true_graph)[1]
true_graph_adj = matrix(0, p, p)
true_moral_adj = matrix(0, p, p)
# moral_graph_adj = matrix(0, p, p)
for (ii in 1:m) {
true_graph_adj[true_graph[ii,1], true_graph[ii,2]] = 1
}
for (ii in 1:dim(true_moral)[1]){
true_moral_adj[true_moral[ii,1], true_moral[ii,2]] = 1
}
ans = glasso(S,log(p)/n)
theta = ans$wi
theta[abs(theta) < 0.15] = 0
diag(theta) = 0
temp = sign(abs(theta))
sum(temp * true_graph_adj)
sum(moral_graph * true_graph_adj)
sum(true_graph_adj)
sum(true_moral_adj)
sum(temp)
sum(moral_graph)
# write.table(temp,paste(dataset.folder,dataset.name,"mgest_PearsonCorEst_glasso.txt",sep="\\"),sep=",",row.names = FALSE,col.names=FALSE)
pc.fit <- pc(suffStat = list(C = cor(data), n = n),indepTest = gaussCItest,alpha=0.05, p=70, verbose = TRUE)
pc.fit
sum(true_graph_adj)
pc.fit <- pc(suffStat = list(C = cor(data), n = n),indepTest = gaussCItest,alpha=0.05, p=70, verbose = TRUE, skel.method = "stable")
pc.fit
pc.fit <- pc(suffStat = list(C = cor(data), n = n),indepTest = gaussCItest,alpha=0.1, p=70, verbose = TRUE, skel.method = "stable")
pc.fit
as(pc.fit, "amat")
View(true_graph_adj)
pc.fit <- pc(suffStat = list(C = cor(data), n = n),indepTest = gaussCItest,alpha=0.1, p=70, verbose = FALSE, skel.method = "stable.fast")
pc.fit
cor(data)
dim(cor(data))
install.packages("cpdag")
install.packages("cpdag")
# Install and load the glmnet package if not already installed
# install.packages("glmnet")
library(glmnet)
# Generate some example data
set.seed(123)
n <- 100  # Number of observations
p <- 10   # Number of predictors
X <- matrix(rnorm(n * p), n, p)  # Simulated predictor matrix
beta_true <- rep(0, p)
beta_true[1:3] <- c(1, 2, 3)    # True coefficients (only the first 3 predictors are non-zero)
epsilon <- rnorm(n)  # Random error term
y <- X %*% beta_true + epsilon  # Simulated response variable
# Fit Lasso regression model
alpha <- 1  # 1 for Lasso, 0 for Ridge, values between 0 and 1 for Elastic Net
cv_fit <- cv.glmnet(X, y, alpha = alpha)
# Plot the cross-validated error as a function of lambda
plot(cv_fit)
# Find the optimal lambda that minimizes the cross-validated error
optimal_lambda <- cv_fit$lambda.min
cat("Optimal Lambda:", optimal_lambda, "\n")
# Fit the final Lasso model with the optimal lambda
lasso_model <- glmnet(X, y, alpha = alpha, lambda = optimal_lambda)
# Display the coefficients
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 0.1)
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 0.5)
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 5)
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 10)
coef(lasso_model)
# Install and load the glmnet package if not already installed
# install.packages("glmnet")
library(glmnet)
# Generate some example data
set.seed(123)
n <- 1000  # Number of observations
p <- 100   # Number of predictors
X <- matrix(rnorm(n * p), n, p)  # Simulated predictor matrix
beta_true <- rep(0, p)
beta_true[1:3] <- c(1, 2, 3)    # True coefficients (only the first 3 predictors are non-zero)
epsilon <- rnorm(n)  # Random error term
y <- X %*% beta_true + epsilon  # Simulated response variable
# Fit Lasso regression model
alpha <- 1  # 1 for Lasso, 0 for Ridge, values between 0 and 1 for Elastic Net
cv_fit <- cv.glmnet(X, y, alpha = alpha)
# Plot the cross-validated error as a function of lambda
plot(cv_fit)
# Find the optimal lambda that minimizes the cross-validated error
optimal_lambda <- cv_fit$lambda.min
cat("Optimal Lambda:", optimal_lambda, "\n")
# Fit the final Lasso model with the optimal lambda
lasso_model <- glmnet(X, y, alpha = alpha, lambda = optimal_lambda)
# Display the coefficients
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 0.1)
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 1)
coef(lasso_model)
lasso_model <- glmnet(X, y, alpha = alpha, lambda = 10)
coef(lasso_model)
setwd('E:\Northwestern\Research\independent study 1\dag\MICP-code')
setwd('E:\\Northwestern\\Research\\independent study 1\\dag\\MICP-code')
# Using this
library(pcalg)
library(igraph)
library(gRbase)
data.path = "./Data/SyntheticDataNID"
setwd(data.path)
m_list = c(15)
for (m in m_list) {
g = pcalg::randomDAG(m, 0.2/(m/10)) # generated DAG
moral_g = moralize(g) # moral graph
edge.list = apply(get.edgelist(igraph.from.graphNEL(g)), c(1, 2), as.numeric)
moral.edge.list = apply(get.edgelist(igraph.from.graphNEL(moral_g)), c(1, 2), as.numeric)
file.name = paste("New_DAG_", m, ".txt", sep="")
moral.file.name = paste("Moral_", file.name, sep="")
# write.table(edge.list, file.name, row.names=FALSE, col.names=FALSE)
# write.table(moral.edge.list, moral.file.name, row.names=FALSE, col.names=FALSE)
}
# Generate non-equal variance data from dag
# This is for the experiment of early stopping where I need to generate DAGs and
# data in NID cases.
library(igraph)
library(MASS)
data.path = "./Data/SyntheticDataNID"
setwd(data.path)
data.path = "./Data/SyntheticDataNID"
setwd(data.path)
wd
setwd()
setwd('../')
setwd('../')
data.path = "./Data/SyntheticDataNID"
setwd(data.path)
# Generate non-equal variance data from dag
# This is for the experiment of early stopping where I need to generate DAGs and
# data in NID cases.
library(igraph)
library(MASS)
data.path = "./Data/SyntheticDataNID"
setwd(data.path)
eweights <- c(-0.8, -0.6, 0.6, 0.8)
sigvec <- c(0.5, 1, 1.5)
nsamples <- 400
ndata <- 10
m_list = c(10,20,30)
filenames <- list.files(data.path, "^D")  # DAG edge files starting with D.
for (i in c(1:length(m_list))){
m = m_list[i]
fname = list.files(data.path, paste0("^DAG_",m))
elist = read.table(fname) # read edge list
## create a graph object and get adjacency matrix
gg <- graph_from_edgelist(as.matrix(elist))
adjmat <- t(as.matrix(get.adjacency(gg)))
nv <- ncol(adjmat)
## add weights to the adjacency matrix and obtain influence matrix
set.seed(i)
adjmat_wgtd <- adjmat *
matrix(sample(eweights, nv*nv, replace=T), nv, nv)
Ip <- diag(1, nv, nv)
infmat <- solve(Ip - adjmat_wgtd)
## covariance matrix for random noise with non-equal variance
## using formulas in Shojaie & Michailidis (2010)
set.seed(i)
covmat <- diag(sample(sigvec, nv, replace=T))
covmat <- infmat %*% covmat %*% t(infmat)
## generate data and write it into the same folder
for(jj in 1:ndata){
set.seed(jj)
datmat <- mvrnorm(n=nsamples, mu=rep(0,nv), Sigma=covmat)
datfilename <- paste0(
paste("data","m",m, "n", nsamples, "iter", jj, sep="_"), ".csv")
# write.table(datmat, datfilename, sep = ",",
#             row.names=FALSE, col.names=FALSE)
}
}
# Generate non-equal variance data from dag
# This is for the experiment of early stopping where I need to generate DAGs and
# data in NID cases.
library(igraph)
library(MASS)
# data.path = "./Data/SyntheticDataNID"
# setwd(data.path)
eweights <- c(-0.8, -0.6, 0.6, 0.8)
sigvec <- c(0.5, 1, 1.5)
nsamples <- 400
ndata <- 10
m_list = c(10,20,30)
filenames <- list.files(data.path, "^D")  # DAG edge files starting with D.
for (i in c(1:length(m_list))){
m = m_list[i]
fname = list.files(data.path, paste0("^DAG_",m))
elist = read.table(fname) # read edge list
## create a graph object and get adjacency matrix
gg <- graph_from_edgelist(as.matrix(elist))
adjmat <- t(as.matrix(get.adjacency(gg)))
nv <- ncol(adjmat)
## add weights to the adjacency matrix and obtain influence matrix
set.seed(i)
adjmat_wgtd <- adjmat *
matrix(sample(eweights, nv*nv, replace=T), nv, nv)
Ip <- diag(1, nv, nv)
infmat <- solve(Ip - adjmat_wgtd)
## covariance matrix for random noise with non-equal variance
## using formulas in Shojaie & Michailidis (2010)
set.seed(i)
covmat <- diag(sample(sigvec, nv, replace=T))
covmat <- infmat %*% covmat %*% t(infmat)
## generate data and write it into the same folder
for(jj in 1:ndata){
set.seed(jj)
datmat <- mvrnorm(n=nsamples, mu=rep(0,nv), Sigma=covmat)
datfilename <- paste0(
paste("data","m",m, "n", nsamples, "iter", jj, sep="_"), ".csv")
# write.table(datmat, datfilename, sep = ",",
#             row.names=FALSE, col.names=FALSE)
}
}
