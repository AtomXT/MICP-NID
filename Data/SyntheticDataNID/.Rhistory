abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 50, 0.01)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 80, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 4)
data_2 <- rnorm(200, mean = 1, sd = 1)
data_3 <- rnorm(200, mean = 1, sd = 4)
data_4 <- rnorm(200, mean = 1, sd = 0.5)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 4)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 4)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
set.seed(1234)
data_1 <- rnorm(300, mean = 1, sd = 4)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 4)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
set.seed(1234)
data_1 <- rnorm(400, mean = 1, sd = 4)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 4)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
T <- mosum_test(x, 80, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 4)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 4)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
T_values
length(x)
mosum_test <- function(x, G, alpha){
n <- length(x)
stopifnot(2 * G < n)
T_value <- rep(NA, n)
lower_mean <-rep(NA, n)
upper_mean <-rep(NA, n)
lower_sigma <-rep(NA, n)
upper_sigma <-rep(NA, n)
Sigma <- rep(NA ,n)
Vars <- rep(NA, n)
for (k in 1:n) {
Vars[k] <- var(x[max(k-G, 1):(k)])
}
for (k in G:(n-G)) {
Sigma[k] <- (sqrt(var(Vars[(k + 1):(k+G)])) + sqrt(var(Vars[(k-G+1):k]))) / 2
}
for (k in G:(n - G)) {
T_value[k] <- sqrt(G/2) * (var(x[(k + 1):(k+G)]) - var(x[(k-G+1):k]))/Sigma[k]
}
#Compute Test statistic vector
T_test = abs(T_value)
#Compute critical value lines
a <- sqrt(2 * log(n/G))
b <- (2 * log(n / G)) + (0.5 * log(log(n / G))) + log(3 / 2) - (0.5 * (log(pi)))
Quantile_alpha <- -log(log(1 / (1 - alpha) ** (1 / 2)))
crit_value <- (Quantile_alpha + b) / a
crit_boundary <- rep(crit_value, n)
#constructing interval for local significant points above critical value lines
signif_points <- which(T_test > crit_value)
dog <- cumsum(c(TRUE, diff(signif_points) != 1))
doggo <- (c(TRUE, diff(signif_points) != 1))
max_interval <- split(signif_points, cumsum(c(TRUE, diff(signif_points) != 1))) |> unname()
#Compute changing points
max_interval <- Filter(function(x) length(x) >= G, max_interval)
maximum_points <- lapply(max_interval, function(k){k[which.max(T_test[k])]})
return(list(T_test, sigma, crit_boundary, signif_points,maximum_points,max_interval,dog,doggo))
}
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 4)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 4)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
T <- mosum_test(x, 80, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 2)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 2)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
# pdf("plot_data.pdf")
plot(ts(x))
# dev.off()
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
T <- mosum_test(x, 80, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
# pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
# dev.off()
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 2)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 2)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
pdf("plot_data.pdf")
plot(ts(x))
dev.off()
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 2)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 2)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
plot(ts(x))
pdf("plot_data.pdf")
plot(ts(x))
dev.off()
T <- mosum_test(x, 30, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
T <- mosum_test(x, 30, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_50.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
T <- mosum_test(x, 80, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_80.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
T <- mosum_test(x, 100, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_100.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
set.seed(1234)
data_1 <- rnorm(200, mean = 1, sd = 2)
data_2 <- rnorm(200, mean = 1, sd = 0.5)
data_3 <- rnorm(200, mean = 1, sd = 2)
data_4 <- rnorm(200, mean = 1, sd = 1)
x <- c(data_1, data_2, data_3, data_4)
plot(ts(x))
pdf("plot_x.pdf")
plot(ts(x))
dev.off()
T <- mosum_test(x, 30, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_30.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
T <- mosum_test(x, 50, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_50.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
T <- mosum_test(x, 80, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_80.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
T <- mosum_test(x, 100, 0.05)
T_values = unlist(T[1])
Local_var = unlist(T[2])
crit_boundary = unlist(T[3])
signif_points = unlist(T[4])
local_max = unlist(T[5])
max_interval = T[6]
pdf("T_values_100.pdf")
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
dev.off()
plot(ts(T_values), ylim = c(0,50))
lines((crit_boundary), col='red')
abline(v=local_max, col='green')
##############
### 06/06/2024
### Generate 10 datasets for each real world network from 1dsep to 12hepar
### But use non-Gaussian errors.
### The idea follows from the JMLR paper by Shimizu 06.
##############
library(igraph)
library(MASS)
data.path = "/Users/tongxu/Downloads/projects/micodag/Data/RealWorldDatasetsTXu-NonGaussian_30/"
setwd(data.path)
filenames <- list.files(data.path)
eweights <- c(-0.8, -0.6, 0.6, 0.8)
sigvec <- c(0.5, 1, 1.5)
nsamples <- 500
ndata <- 30
power_nonlinearity <- function(x) {
# Define the intervals
intervals <- list(c(0.5, 0.8), c(1.2, 2.0))
# Randomly choose one of the intervals
chosen_interval <- sample(intervals, 1)
# Generate a random number within the chosen interval
random_power <- runif(1, min = chosen_interval[[1]][1], max = chosen_interval[[1]][2])
return(sign(x)*abs(x)**random_power)
}
#ii=3
for(ii in 1:length(filenames)){
fname = filenames[ii]
## read the edge list
filename <- list.files(paste(data.path, fname, sep="/"),"Sparse_Original")
elist <- read.csv(paste(data.path, fname, filename, sep="/"))
## create a graph object and get adjacency matrix
gg <- graph_from_edgelist(as.matrix(elist))
adjmat <- t(as.matrix(get.adjacency(gg)))
nv <- ncol(adjmat)
## add weights to the adjacency matrix and obtain influence matrix
set.seed(ii)
adjmat_wgtd <- adjmat *
matrix(sample(eweights, nv*nv, replace=T), nv, nv)
Ip <- diag(1, nv, nv)
infmat <- solve(Ip - adjmat_wgtd)
## covariance matrix for random noise with non-equal variance
## using formulas in Shojaie & Michailidis (2010)
set.seed(ii)
covmat <- diag(sample(sigvec, nv, replace=T))
## generate data and write it into the same folder
for(jj in 11:ndata){
set.seed(jj)
errors <- mvrnorm(n=nsamples, mu=rep(0,nv), Sigma=covmat)
errors1 <- sapply(errors, power_nonlinearity)
errors1 <- matrix(errors1, nrow=nsamples, ncol=nv)
datmat <- t(infmat %*% t(errors1))
datfilename <- paste0(
paste("data", fname, "n", nsamples, "iter", jj, sep="_"), ".csv")
datfilename <- paste(data.path, fname, datfilename, sep="/")
write.table(datmat, datfilename, sep = ",",
row.names=FALSE, col.names=FALSE)
}
}
# Generate non-equal variance data from dag. Use non-Gaussian errors.
# This is for the experiment of testing non-Gaussian errors on small graphs.
library(igraph)
library(MASS)
data.path = "/Users/tongxu/Downloads/projects/micodag/Data/SyntheticDataNID/"
setwd(data.path)
alphas <- c(4)
eweights <- c(-0.8, -0.6, 0.6, 0.8)
# sigvec <- c(0.5, 1, 1.5)
nsamples <- 400
ndata <- 30
power_nonlinearity <- function(x) {
# Define the intervals
intervals <- list(c(0.5, 0.8), c(1.2, 2.0))
# Randomly choose one of the intervals
chosen_interval <- sample(intervals, 1)
# Generate a random number within the chosen interval
random_power <- runif(1, min = chosen_interval[[1]][1], max = chosen_interval[[1]][2])
return(sign(x)*abs(x)**random_power)
}
m_list = c(10,15,20)
# filenames <- list.files(data.path, "^D")  # DAG edge files starting with D.
for (alpha in alphas) {
for (i in c(1:length(m_list))){
m = m_list[i]
fname = list.files(data.path, paste0("^DAG_",m))
elist = read.table(fname) # read edge list
## create a graph object and get adjacency matrix
gg <- graph_from_edgelist(as.matrix(elist))
adjmat <- t(as.matrix(get.adjacency(gg)))
nv <- ncol(adjmat)
## add weights to the adjacency matrix and obtain influence matrix
set.seed(i)
adjmat_wgtd <- adjmat *
matrix(sample(eweights, nv*nv, replace=T), nv, nv)
Ip <- diag(1, nv, nv)
infmat <- solve(Ip - adjmat_wgtd)
## covariance matrix for random noise with non-equal variance
## using formulas in Shojaie & Michailidis (2010)
set.seed(i)
# covmat <- diag(sample(sigvec, nv, replace=T))
covmat <- diag(runif(nv, 4-alpha, 4+alpha))
# covmat <- infmat %*% covmat %*% t(infmat)
## generate data and write it into the same folder
for(jj in 11:ndata){
set.seed(jj)
errors <- mvrnorm(n=nsamples, mu=rep(0,nv), Sigma=covmat)
errors1 <- sapply(errors, power_nonlinearity)
errors1 <- matrix(errors1, nrow=nsamples, ncol=nv)
datmat <- t(infmat %*% t(errors1))
datfilename <- paste0(
paste("./non-Gaussian/data","m",m, "n", nsamples, "alpha", alpha, "iter", jj, sep="_"), ".csv")
write.table(datmat, datfilename, sep = ",",
row.names=FALSE, col.names=FALSE)
}
}
}
